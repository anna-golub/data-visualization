# -*- coding: utf-8 -*-
"""6_machine_learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16zaRbHZdI7GOsSruDTgH7YcWwdSLv_-u

# Предобработка
"""

import pandas as pd
import matplotlib.pyplot as plt

import json

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/визуализация/Goodreads-books_preprocessed.csv', 
                 index_col=0,
                 converters={"authors": lambda x: x.strip("[]").replace("'","").split(", ")})
df['publication_date'] = pd.to_datetime(df['publication_date'])
df.head()

df.shape

"""## Языковые коды"""

df['language_code'].unique()

lang_codes = list(df['language_code'].unique())
replace_map = {'language_code' : {k: v for k,v in zip(lang_codes, list(range(1,len(lang_codes) + 1)))}}
df = df.replace(replace_map)

"""## Издательства"""

df['publisher'].nunique()

publishers = list(df['publisher'].unique())
replace_map = {'publisher' : {k: v for k,v in zip(publishers, list(range(1,len(publishers) + 1)))}}
df = df.replace(replace_map)

"""## Даты публикации"""

df['publication_date'].min()

import datetime

start_date = datetime.datetime(1900, 1, 1)
df['year'] = pd.DatetimeIndex(df['publication_date']).year
df['publication_date'] = df['publication_date'].apply(lambda x: (x - start_date).days)

df.drop(['bookID', 'title', 'authors'], axis=1, inplace=True)

df.head()

"""# Обучение модели

## Средний рейтинг книги
"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression, SGDRegressor
from sklearn.metrics import r2_score, mean_squared_error

X = df.drop(['average_rating'], axis=1)
y = df['average_rating']

scaler = StandardScaler()
X = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7)

reg = LinearRegression().fit(X_train, y_train)
reg.score(X_train, y_train)

r2_score(y_test, reg.predict(X_test))

"""## Год издания"""

df['year'].unique()

df.year.min(), df.year.max()

X = df.drop('year', axis=1)
y = df['year']

scaler = StandardScaler()
X = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7)

reg = LinearRegression().fit(X_train, y_train)
reg.score(X_train, y_train)

r2_score(y_test, reg.predict(X_test))

"""# Data Storytelling"""

languages_count = df.groupby('language_code')['language_code'].count().reset_index(name='count')
languages_count = languages_count.sort_values(ascending=False, by='count').iloc[:4]
languages_count.plot.pie(y='count', labels=['English', 'Spanish', 'French', 'German'], 
                        fontsize=20, figsize=(10, 10), legend=None,
                        colors=['moccasin', 'paleturquoise', 'plum', 'honeydew', 'mistyrose']);
plt.axes().set_ylabel('');
plt.axes().set_title('Top-5 languages distribution', fontsize=20)
plt.savefig('lang_distribution.jpg')

import seaborn as sns
import numpy as np

sns.set_style('darkgrid')

sns.color_palette("Pastel1_r")
plt.plot()
ax = sns.histplot(data=df,
            x='average_rating', binwidth=0.25,
            label='number of books', color='c');
plt.legend(ncol=1);
ax.set(xlabel='average rating', ylabel='',
       title='Rating distribution');
plt.savefig('rating_distribution.jpg')

books_years = df.groupby('year')['average_rating'].count().to_frame().reset_index()
books_years.columns = ['year', 'books_published']
books_years.head()

sns.color_palette("Pastel1_r")
plt.plot()
ax = sns.lineplot(data=books_years,
             x='year', y='books_published',
             color='c');
ax.set(xlabel='year', ylabel='number of books', 
       title='Publishing dynamic');
plt.savefig('publishing_dynamic.jpg')

sns.color_palette("Pastel1_r")
plt.plot()
ax = sns.histplot(data=df[df['num_pages'] <= 1750],
            x='num_pages', binwidth=175,
            label='books count', color='m');
plt.legend(ncol=1);
ax.set(xlabel='number of pages', ylabel='',
       title='Book length distribution');
plt.savefig('book_length_distr.jpg')